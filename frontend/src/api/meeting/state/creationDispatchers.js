// Action creators

/**
 * Generates action that sets meeting creation state to `pending`
 * 
 * @returns {Object} Action setting meeting creation state to `pending`
 */
const actionPending = () => {
    return {
        type: "meeting/create",
        payload: {
            creationState: "pending"
        }
    }
}

/**
 * Generates action that sets meeting creation state to `success` and saves meeting code
 * 
 * @param {string} code Team code in which meeting is being created
 * @returns {Object} Action setting meeting creation state to `success`
 */
const actionSuccess = (code) => {
    return {
        type: "meeting/create",
        payload: {
            creationState: "success",
            code: code
        }
    }
}

/**
 * Generates action that sets meeting creation state to `error` and saves error
 * 
 * @param {Object} error Error response received from backend
 * @returns {Object} Action setting meeting creation state to `error`
 */
const actionError = (error) => {
    return {
        type: "meeting/creation",
        payload: {
            creationState: "error",
            error: error
        }
    }
}

// Action dispatchers

/**
 * Dispatch the action generated for the pending state
 * 
 * @param {Dispatch} dispatch Hook to dispatch the actio
 */
export const dispatchPending = (dispatch) => {
    dispatch(actionPending())
}

/**
 * Dispatch the action generated using the code provided and hence, changes the meeting creation state to `success`
 * 
 * @param {Dispatch} dispatch Hook to dispatch the action
 * @param {String} code Team code in which meeting is being created
 */
export const dispatchSuccess = (dispatch, code) => {
    dispatch(actionSuccess(code))
}

/**
 * Dispatch the action generated by using error provided and hence, change the meeting creation state to `error`
 * 
 * @param {Dispatch} dispatch 
 * @param {Object} error 
 */
export const dispatchError = (dispatch, error) => {
    dispatch(actionError(error))
}
