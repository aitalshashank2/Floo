// Action creators

/**
 * Generates action that sets the user login state to `pending`
 * 
 * @returns {Object} Action setting login state to `pending`
 */
const actionPendingState = () => {
    return {
        type: 'user/user_login',
        payload: {
            apiState: "pending"
        }
    }
}

/**
 * Generates action that sets the user information
 * 
 * @param {Object} userDetails User Details that are to be set
 * @returns {Object} Action setting user details and apiState to `success`
 */
const actionUserDetails = (userDetails) => {
    return {
        type: 'user/user_login',
        payload: {
            apiState: "success",
            userDetails: userDetails
        }
    }
}

/**
 * Generates action that sets the apiState to error and adds errorDetails
 * 
 * @param {Object} errorDetails Error Details to be set in the store
 * @returns {Object} Action setting error details and apiState to `error`
 */
const actionErrorDetails = (errorDetails) => {
    return {
        type: 'user/user_login',
        payload: {
            apiState: "error",
            errorDetails: errorDetails
        }
    }
}

/**
 * Generates action that logs user out
 * 
 * @returns {Object} Action used to broadcast user logout
 */
const actionLogout = () => {
    return {
        type: 'user/user_logout'
    }
}

// Action Dispatchers
/**
 * Dispatches the action generated for the pending state
 * 
 * @param {Dispatch} dispatch Hook to dispatch the action
 */
export const dispatchPendingState = (dispatch) => {
    dispatch(actionPendingState())
}

/**
 * Dispatches the action generated by using the userDetails provided and hence, changes apiState to `success`
 * 
 * @param {Dispatch} dispatch Hook to dispatch the action
 * @param {Object} userDetails Dictionary containing the user details
 */
export const dispatchUserDetails = (dispatch, userDetails) => {
    dispatch(actionUserDetails(userDetails))
}

/**
 * Dispatches the action generated by using the errorDetails provided and hence, changes apiState to `error`
 * 
 * @param {Dispatch} dispatch Hook to dispatch the action
 * @param {Object} errorDetails Dictionary containing the error details
 */
export const dispatchErrorDetails = (dispatch, errorDetails) => {
    dispatch(actionErrorDetails(errorDetails))
}

/**
 * Dispatches the action generated for the logout state
 * 
 * @param {Dispatch} dispatch Hook to dispatch the action
 */
export const dispatchLogout = (dispatch) => {
    dispatch(actionLogout())
}
